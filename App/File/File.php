<?php
define('S_IRUSR', 00400); // Чтение для владельца.
define('S_IWUSR', 00200); // Запись для владельца.
define('S_IXUSR', 00100); // Исполнение для владельца.

define('S_IRGRP', 00040); // Чтение для группы.
define('S_IWGRP', 00020); // Запись для группы.
define('S_IXGRP', 00010); // Исполнение для группы.

define('S_IROTH', 00004); // Чтение для остальных.
define('S_IWOTH', 00002); // Запись для остальных.
define('S_IXOTH', 00001); // Исполнение для остальных.

abstract class File
{
    protected string $fpath;
    protected $perms = 0600;
    protected $fd = false;

    public function exists(): bool
    {
        return file_exists($this->fpath) && is_file($this->fpath);
    }

    public function perms()
    {
        if (!$this->exists()) {
            return 0000;
        }
        return fileperms($this->fpath);
    }
}

/*
Особенности!
При создании экземпляра класса файл создается или выбрасываются исключения.
Далее приложения должны работать таким образом чтобы файл не был удален до разрушения класса.
Так же надо позаботиться о правах доступа. 
Класс работает с учетом того, что файл доступен для чтения и записи.
Класс работает с учетом того что файл существует.
Некоторые методы будут проверять существование файла и пересоздавать его.
Некоторые методы в случае отсутствия файла будут возвращать нули, пустые строки итп.

В случае каких либо противоречивых условий, проблем доступа, невозможности создания файла
класс не будет прерывать работу и выбрасывать исключений. Методы будут выдавать нули, пустые строки, false итп.
*/